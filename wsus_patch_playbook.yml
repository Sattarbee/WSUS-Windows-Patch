---
- name: Step 1 - Get WSUS Clients from "Servers" group
  hosts: wsus_server
  gather_facts: no
  tasks:
    - name: Query WSUS server for registered clients in "Servers" group
      win_shell: |
        Import-Module UpdateServices
        $wsus = Get-WsusServer
        $group = $wsus.GetComputerTargetGroups() | Where-Object { $_.Name -eq "Servers" }
        $group.GetComputerTargets() | Select-Object -ExpandProperty FullDomainName
      register: wsus_servers

    - name: Show WSUS clients (each on a new line)
      debug:
        msg: "{{ wsus_servers.stdout_lines | join('\n') }}"

- name: Step 2 - Format and save WSUS clients to CSV
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set fact for cleaned WSUS server list
      set_fact:
        wsus_server_list: "{{ hostvars[groups['wsus_server'][0]].wsus_servers.stdout_lines | map('trim') | list }}"

    - name: Show formatted WSUS server list
      debug:
        msg: "{{ wsus_server_list | join('\n') }}"

    - name: Add WSUS servers to dynamic group (remove duplicates)
      add_host:
        name: "{{ item }}"
        groups: wsus_dynamic
      loop: "{{ wsus_server_list | unique }}"

    - name: Save WSUS server list to CSV file
      copy:
        dest: "/tmp/wsus_server_list.csv"
        content: |
          Hostname
          {% for host in wsus_server_list | unique %}
          {{ host }}
          {% endfor %}
      delegate_to: localhost

- name: Step 3 - Copy CSV to Windows workstation
  hosts: my_windows_pc
  gather_facts: no
  tasks:
    - name: Copy CSV report to Downloads folder on Windows PC
      ansible.windows.win_copy:
        src: /tmp/wsus_server_list.csv
        dest: C:\Users\P-SVE7FZ\Downloads\wsus_server_list.csv

# ---------------------------------------------
# STEP 4: Scan each WSUS client for pending updates
# ---------------------------------------------
- name: Step 4 - Scan WSUS clients for pending updates
  hosts: wsus_dynamic
  gather_facts: no
  tasks:
    - name: Show current host being scanned
      debug:
        msg: "Scanning {{ inventory_hostname }}"

    - name: Scan for pending updates (search only)
      win_updates:
        state: searched
      register: update_scan_result

    - name: Set fact with pending updates
      set_fact:
        pending_updates: "{{ update_scan_result.updates | map(attribute='title') | list }}"

    - name: Add results to central fact for reporting
      set_fact:
        patch_report: "{{ patch_report | default({}) | combine({inventory_hostname: pending_updates}) }}"
      delegate_to: localhost

# ---------------------------------------------
# STEP 5: Save Pending Updates Report to CSV
# ---------------------------------------------
- name: Step 5 - Generate consolidated CSV report of pending patches
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Ensure patch report directory exists
      file:
        path: /tmp/wsus_patch_report
        state: directory
        mode: '0755'

    - name: Generate CSV from patch_report
      copy:
        dest: "/tmp/wsus_patch_report/wsus_pending_patches.csv"
        content: |
          Hostname,Pending Patches
          {% for host, patches in patch_report.items() %}
          {{ host }},{"{{ patches | join('; ') if patches | length > 0 else 'No pending updates' }}"}
          {% endfor %}
