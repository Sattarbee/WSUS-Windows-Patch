---
- name: Step 1 - Get WSUS Clients from "Servers" group
  hosts: wsus_server
  gather_facts: no
  tasks:
    - name: Query WSUS server for registered clients in "Servers" group
      win_shell: |
        Import-Module UpdateServices
        $wsus = Get-WsusServer
        $group = $wsus.GetComputerTargetGroups() | Where-Object { $_.Name -eq "Servers" }
        $group.GetComputerTargets() | Select-Object -ExpandProperty FullDomainName
      register: wsus_servers

- name: Step 2 - Save WSUS client list and create dynamic group
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Extract WSUS server list from first wsus_server host
      set_fact:
        wsus_server_list: "{{ hostvars[groups['wsus_server'][0]].wsus_servers.stdout_lines | map('trim') | unique | list }}"

    - name: Add WSUS servers to dynamic group (wsus_dynamic)
      add_host:
        name: "{{ item }}"
        groups: wsus_dynamic
      loop: "{{ wsus_server_list }}"

    - name: Save WSUS server list CSV
      copy:
        dest: "/tmp/wsus_server_list.csv"
        content: |
          Hostname
          {% for host in wsus_server_list %}
          {{ host }}
          {% endfor %}

- name: Step 3 - Scan WSUS clients for pending updates
  hosts: wsus_dynamic
  gather_facts: yes
  tasks:
    - name: Scan for pending updates
      ansible.windows.win_updates:
        state: searched
      register: update_scan_result

    - name: Save update scan result as a host fact for Step 4
      set_fact:
        update_scan_result: "{{ update_scan_result }}"

- name: Step 4 - Generate consolidated patch report on localhost
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Gather update_scan_result from all wsus_dynamic hosts
      set_fact:
        patch_report: >-
          {{
            dict(
              groups['wsus_dynamic'] |
              zip(groups['wsus_dynamic'] | map('extract', hostvars, 'update_scan_result'))
            )
          }}

    - name: Create patch report directory
      file:
        path: /var/tmp/wsus_patch_report
        state: directory
        mode: '0755'

    - name: Generate consolidated CSV of pending patches (including filtered updates and OS)
      copy:
        dest: "/var/tmp/wsus_patch_report/wsus_pending_patches.csv"
        content: |
          Hostname,OS Version,KBs,Titles
          {% for host, result in patch_report.items() %}
          {% set updates = result.updates.values() | list if result.updates is defined and result.updates is mapping else (result.updates if result.updates is iterable else []) %}
          {% set filtered_updates = result.filtered_updates.values() | list if result.filtered_updates is defined else [] %}
          {% set combined_updates = updates + filtered_updates %}
          {% set os_version = hostvars[host].ansible_facts.os_version | default('Unknown') %}
          {{ host }},{{ os_version }},"{% if combined_updates and combined_updates[0] is mapping %}{{ combined_updates | map(attribute='kb') | map('join', '') | join('; ') }}{% else %}None{% endif %}","{% if combined_updates and combined_updates[0] is mapping %}{{ combined_updates | map(attribute='title') | join('; ') }}{% else %}No pending updates{% endif %}"
          {% endfor %}

    - name: Expose patch report file as downloadable artifact in Tower
      set_stats:
        data:
          patch_report_file: "/var/tmp/wsus_patch_report/wsus_pending_patches.csv"

- name: Step 5 - Copy consolidated CSV report to Windows PC
  hosts: my_windows_pc
  gather_facts: no
  tasks:
    - name: Copy patch report CSV to Windows Downloads
      ansible.windows.win_copy:
        src: /var/tmp/wsus_patch_report/wsus_pending_patches.csv
        dest: C:\Users\P-SVE7FZ\Downloads\wsus_pending_patches.csv
